name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential gfortran libopenblas-dev liblapack-dev

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xdist

    - name: Lint with ruff
      run: |
        pip install ruff
        ruff check src/ scripts/ tests/ || true

    - name: Format check with black
      run: |
        pip install black
        black --check src/ scripts/ tests/ || true

    - name: Type check with mypy
      run: |
        pip install mypy
        mypy src/ || true

    - name: Test with pytest
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=term --maxfail=5 --disable-warnings

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  integration-test:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create test data
      run: |
        mkdir -p data/schemas
        # 这里应该创建或复制测试数据
        echo "id,t,BMI,Y_frac" > data/step1_long_records.csv
        echo "1,1,25.0,0.1" >> data/step1_long_records.csv
        echo "1,2,25.0,0.2" >> data/step1_long_records.csv

    - name: Run integration test
      run: |
        python scripts/run_pipeline.py --config configs/q3_default.yaml --skip-plots || true

  docker-test:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Build Docker image
      run: docker build -t mcm-q3:test .

    - name: Test Docker image
      run: |
        docker run --rm mcm-q3:test python -c "import src.config; print('Docker build successful')"

  security-scan:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Run Bandit security scan
      run: |
        pip install bandit
        bandit -r src/ -f json -o bandit-report.json || true

    - name: Run Safety check
      run: |
        pip install safety
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  performance-test:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install memory-profiler

    - name: Run performance test
      run: |
        # 这里可以运行性能基准测试
        python -c "print('Performance test placeholder')"

  publish-docs:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [test, integration-test]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install documentation dependencies
      run: |
        pip install sphinx sphinx-rtd-theme

    - name: Build documentation
      run: |
        # sphinx-build -b html docs/ docs/_build/
        echo "Documentation build placeholder"

    - name: Deploy to GitHub Pages
      if: success()
      run: |
        echo "Documentation deployment placeholder"